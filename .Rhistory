dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment,hours=15,minutes=54)
this_moment
?now
now("America/New_York")
now(tzone="America/New_York")
nyc<-now(tzone="America/New_York")
nyc
nyc+days(2)
depart<-nyc+days(2)
depart
depart<-update(depart, hour=17,minute=34)
depart<-update(depart, hours=17,minutes=34)
depart
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17, 2008","Asia/Singapore")
last_time<-mdy("June 17, 2008",tz="Asia/Singapore")
last_time<-mdy("June 17, 2008",tz="Singapore")
last_time
?new_interval
how_long<-new_interval(last_time,arrive)
as.period(how_long)
stopwatch()
Sys.setlocale("LC_TIME", "de_DE.UTF-8")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt<-(z-1)^2
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_sqrt
my_div
swirl()
getwd()
ls()
x<-9
ls()
list.files()
?list.files
args(ls.files)
args(ls.files())
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.creat("mytest.R")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(folder1,folder2)
?file.path
file.path(folder1)
folder1<-file.path("mytest3.R")
file.path("folder1"","folder2"")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
seq((0,10,by=0.5))
seq(0,10,by=0.5)
seq(5,10,30)
seq(5,10,length=30)
my_seqseq(5,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("RColorBrewer")
x<-rnorm(10000)
y<-rnorm(10000)
smoothScatter(x,y)
?par
par(mar=c(5,4,4,2))
smoothScatter(x,y)
par(mar=c(2,2,2,2))
smoothScatter(x,y)
?mean
?"table"
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
View(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flgs$landmass,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plats)
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4 replace=TRUE)
sample(1:6,4, replace=TRUE)
sample(1:6,4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(0:1,100,replace=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(0:1,100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
rbinom(1,size=100,prob=0.7)
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5)
rpois(5,10)
replicate(100,rpois(5,10))
my_poisreplicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colmMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
cass(t1)
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3,"%b %d, %Y %H:%M")
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
?strptime
t3
class(t4)
Sys.tim()>1
Sys.time()>1
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units="days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(speed,dist)
plot(cars)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance",xlab="speed")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance",xlab="Speed")
plot(x=cars$speed,y=cars$dist,main="My Plot")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10:15))
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
library(mtcars)
mtcars
data(mtcars)
mtcars
?boxblot
?boxplot
boxplot(mtcars,formula=mpg~cyl)
boxplot(data=mtcars,formula=mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
install.packages("kernlab")
install.packages("Sweave")
install.packages("knitr")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
plot(log10(trainSpam[, 1:4] + 1))
trainSpam = spam[trainIndicator == 1, ] #alle 1er ins Trainingset
testSpam = spam[trainIndicator == 0, ] #alle 0er ins Testset
plot(log10(trainSpam[, 1:4] + 1))
library(boot)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
## Which predictor has minimum cross-validated error?
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
install.packages('ProjectTemplate')
?qunif
qunif(0.75,0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x[1,]
x[1,:]
x[1,1:4]
x[1:4,1]
x
p
p''
p^T
t(p)
p
x*t(p)
t*p
matrix(x,1,4)
vector(p)
matrix(p,4,1)
matrix(x,1,4)*matrix(p,4,1)
mean(x,p)
?mean
?lapply
lapply(x,x*p)
0.1*1+0.2*2+0.3*3+0.4*4
(0.75*0.3)/((0.75*0.3)+(0.48*0.7))
library(mutate)
library(Mutate)
installed.packages("manipulate")
install.packages("manipulate")
install.packages(("xtable"))
library(xtable)
setwd("/home/sascha/Dokumente/Coursera/Reproducible research/Assignment 1/Solution")
activity_raw<-read.csv("activity.csv",header=TRUE,na.strings = "NA")
activity_raw$date<-as.Date(activity_raw$date, "%Y-%m-%d")
library(plyr)
activity_by_day<-ddply(activity_raw, .(date), summarise, Steps = sum(steps)); #group by date and sum up steps
activity_by_day
mean_ts<-mean(activity_by_day$Steps,na.rm=TRUE)
median_ts<-mean(activity_by_day$Steps,na.rm=TRUE)
mean_ts
median_ts
av_steps_interval<-ddply(activity_raw, .(interval), summarise, Steps = mean(steps,na.rm=TRUE)); #group by interval and calculate mean for all days
par(mar=c(5,4,2,2))
interval_max<-filter(av_steps_interval,Steps==max(Steps))
interval_max[1,1]
library(dplyr);
interval_max<-filter(av_steps_interval,Steps==max(Steps))
interval_max[1,1]
summary(activity_raw)
str(activity_raw)
sum(is.na(activity_raw$steps))
?match
match(av_steps_interval$interval, activity_raw$interval)
?lapply
merge(activity_raw,av_steps_interval,by="interval")
activity_raw_meani<-merge(activity_raw,av_steps_interval,by="interval")
View(activity_raw_meani)
?sub
activity_raw_meani$steps[is.na(activity_raw_meani$steps) == TRUE] <- activity_raw_meani$Steps
summary(activity_raw_meani)
View(activity_raw)
arrange(activity_raw_meani,date,interval)
activity_raw_meani<-arrange(activity_raw_meani,date,interval)
activity_raw_meani<-merge(activity_raw,av_steps_interval,by="interval")
activity_raw_meani[is.na(activity_raw_meani$steps),]
test<-activity_raw_meani[is.na(activity_raw_meani$steps),]
activity_raw_meani[is.na(activity_raw_meani$steps),]<-activity_raw_meani$Steps
activity_raw_meani<-merge(activity_raw,av_steps_interval,by="interval")
activity_raw_meani[is.na(activity_raw_meani$steps)]<-activity_raw_meani$Steps[is.na(activity_raw_meani$steps)]
activity_raw_meani<-merge(activity_raw,av_steps_interval,by="interval")
av_steps_interval<-ddply(activity_raw, .(interval), summarise, steps_avg = mean(steps,na.rm=TRUE)); #group by interval and calculate mean for all days
activity_raw_meani<-merge(activity_raw,av_steps_interval,by="interval")
activity_raw_meani[is.na(activity_raw_meani$steps)]<-activity_raw_meani$Steps[is.na(activity_raw_meani$steps)]
activity_raw_meani[is.na(activity_raw_meani$steps)]<-activity_raw_meani$steps_avg[is.na(activity_raw_meani$steps)]
activity_raw_meani$steps_avg[is.na(activity_raw_meani$steps)]
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-activity_raw_meani$steps_avg[is.na(activity_raw_meani$steps)]
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-av_steps_int$steps_avg[activity_raw_meani$interval==av_steps_interval$interval)]
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-av_steps_int$steps_avg[activity_raw_meani$interval=av_steps_interval$interval)]
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-av_steps_int$steps_avg[activity_raw_meani$interval=av_steps_interval$interval]
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-av_steps_int$steps_avg[activity_raw_meani$interval==av_steps_interval$interval]
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-av_steps_interval$steps_avg[activity_raw_meani$interval==av_steps_interval$interval]
activity_raw_meani<-merge(activity_raw,av_steps_interval,by="interval")
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-activity_raw_meani$steps_avg[is.na(activity_raw_meani$steps)]
summary(activity_raw_meani)
activity_raw_meani$steps[is.na(activity_raw_meani$steps)]<-av_steps_interval$steps_avg[activity_raw_meani$interval==av_steps_interval$interval]
summary(activity_raw_meani)
summary(activity_raw)
View(activity_raw_meani)
activity_raw_meani<-arrange(activity_raw_meani,date,interval)
View(av_steps_interval)
activity_raw[activity_raw$interval==40,]
activity_narepl1<-merge(activity_raw,av_steps_interval,by="interval")
activity_narepl1$steps[is.na(activity_repl1$steps)]<-activity_narepl1$steps_avg[is.na(activity_narepl1$steps)]
activity_narepl1<-merge(activity_raw,av_steps_interval,by="interval")
activity_narepl1$steps[is.na(activity_narepl1$steps)]<-activity_narepl1$steps_avg[is.na(activity_narepl1$steps)]
activity_narepl2<-activity_raw
activity_narepl2$steps[is.na(activity_narepl2$steps)]<-av_steps_interval$steps_avg[activity_narepl2$interval==av_steps_interval$interval]
View(activity_narepl2)
setwd("/home/sascha/Dokumente/Coursera/Reproducible research/Assignment 1/Solution")
activity_raw<-read.csv("activity.csv",header=TRUE,na.strings = "NA")
activity_raw$date<-as.Date(activity_raw$date, "%Y-%m-%d")
library(plyr)
activity_by_day<-ddply(activity_raw, .(date), summarise, Steps = sum(steps)); #group by date and sum up steps
par(mar=c(5,4,2,2))
mean_ts<-mean(activity_by_day$Steps,na.rm=TRUE)
median_ts<-mean(activity_by_day$Steps,na.rm=TRUE)
av_steps_interval<-ddply(activity_raw, .(interval), summarise, steps_avg = mean(steps,na.rm=TRUE)); #group by interval and calculate mean for all days
library(dplyr);
interval_max<-filter(av_steps_interval,Steps==max(steps_avg))
View(av_steps_interval)
interval_max<-filter(av_steps_interval,steps_avg==max(steps_avg))
View(interval_max)
View(av_steps_interval)
summary(activity_raw)
summary(av_steps_interval)
activity_narepl1<-merge(activity_raw,av_steps_interval,by="interval")
activity_narepl1$steps[is.na(activity_narepl1$steps)]<-activity_narepl1$steps_avg[is.na(activity_narepl1$steps)]
activity_narepl2<-activity_raw
activity_narepl2$steps[is.na(activity_narepl2$steps)]<-av_steps_interval$steps_avg[activity_narepl2$interval==av_steps_interval$interval]
View(activity_narepl2)
?identical
identical(activity_narepl1,activity_narepl2)
activity_narepl2$steps[is.na(activity_narepl2$steps)]
activity_narepl2<-activity_raw
activity_narepl2$steps[is.na(activity_narepl2$steps)]
av_steps_interval$steps_avg[activity_narepl2$interval==av_steps_interval$interval]
test<-av_steps_interval$steps_avg[activity_narepl2$interval==av_steps_interval$interval]
summary(test)
View(av_steps_interval)
?par
activity_by_day_repl<-ddply(activity_narepl1, .(date), summarise, Steps = sum(steps));
mean_ts_repl<-mean(activity_by_day$Steps)
median_ts_repl<-mean(activity_by_day$Steps)
par(mfcol=c(1,2),mar=c(5,4,2,2))
hist(activity_by_day_repl$Steps ,breaks=61,xlab="Steps per day (NAs replaced)",ylab="Frequency",main="Histogram: Steps per day")
hist(activity_by_day$Steps,breaks=61,xlab="Steps per day (original)",ylab="Frequency",main="Histogram: Steps per day")
par(mfcol=c(1,2),mar=c(5,4,2,2))
hist(activity_by_day_repl$Steps ,breaks=61,xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)")
hist(activity_by_day$Steps,breaks=61,xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)")
par(mfcol=c(1,2),mar=c(5,4,2,2))
hist(activity_by_day_repl$Steps ,breaks=61,xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)", cex=0.7)
hist(activity_by_day$Steps,breaks=61,xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)", cex=0.7)
hist(activity_by_day_repl$Steps ,breaks=61,xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)", cex=0.3)
hist(activity_by_day$Steps,breaks=61,xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)", cex=0.3)
par(mfcol=c(1,2),mar=c(5,4,2,2))
hist(activity_by_day_repl$Steps ,breaks=61, cex=0.3, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)")
hist(activity_by_day$Steps,breaks=61, cex=0.3, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)")
hist(activity_by_day$Steps,breaks=61, cex.main=0.3, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)")
par(mfcol=c(1,2),mar=c(5,4,2,2))
hist(activity_by_day_repl$Steps ,breaks=61, cex=0.7, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)")
hist(activity_by_day$Steps,breaks=61, cex.main=0.7, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)")
par(mfcol=c(1,2),mar=c(5,4,2,2))
hist(activity_by_day_repl$Steps ,breaks=61, cex.main=0.7, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)")
hist(activity_by_day$Steps,breaks=61, cex.main=0.7, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)")
hist(activity_by_day_repl$Steps ,breaks=61, cex.main=0.8, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)")
hist(activity_by_day$Steps,breaks=61, cex.main=0.8, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)")
hist(activity_by_day_repl$Steps ,breaks=61, cex.axis=0.7, cex.main=0.8, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(NAs replaced)")
hist(activity_by_day$Steps,breaks=61, cex.axis=0.7, cex.main=0.8, cex.lab=0.7, xlab="Steps per day",ylab="Frequency",main="Steps per day\n(original)")
This gives us `r as.integer(mean_ts_repl)` as mean and `r as.integer(median_ts_repl)` as median for the table with NAs replaced (the respective values without replacing NAs were `r mean_ts` and `r median_ts`).
This gives us `r as.integer(mean_ts_repl)` as mean and `r as.integer(median_ts_repl)` as median for the table with NAs replaced (the respective values without replacing NAs were `r as.integer(mean_ts)` and `r as.integer(median_ts)`).
activity_by_day_repl<-ddply(activity_narepl1, .(date), summarise, Steps = sum(steps));
mean_ts_repl<-mean(activity_by_day_repl$Steps)
median_ts_repl<-mean(activity_by_day_repl$Steps)
identical(mean_ts_repl,mean_ts)
View(activity_by_day_repl)
View(activity_narepl1)
activity_narepl1$steps[is.na(activity_narepl1$steps)]<-activity_narepl1$steps_avg[is.na(activity_narepl1$steps)]
View(activity_narepl1)
activity_by_day_repl<-ddply(activity_narepl1, .(date), summarise, Steps = sum(steps)); #group by date and sum up steps
View(activity_by_day_repl)
activity_by_day_repl<-ddply(activity_narepl1, .(date), summarise, Steps_(incl_means) = sum(steps)); #group by date and sum up steps
activity_by_day_repl<-ddply(activity_narepl1, .(date), summarise, Steps_incl_means = sum(steps)); #group by date and sum up steps
View(activity_by_day_repl)
activity_by_day_merged<-merge(activity_by_day,activity_by_day_repl,by=date)
activity_by_day_merged<-merge(activity_by_day,activity_by_day_repl,by="date")
View(activity_by_day_merged)
View(activity_raw)
activity_by_day_merged$difference<-activity_by_day_merged$dSteps_incl_means - activity_by_day_merged$dSteps
-
activity_by_day_merged$difference<-activity_by_day_merged$dSteps_incl_means - activity_by_day_merged$Steps
activity_by_day_merged$difference<-activity_by_day_merged$Steps_incl_means - activity_by_day_merged$Steps
View(activity_by_day_merged)
activity_by_day_merged[activity_by_day_merged$difference!=0]
activity_by_day_merged[activity_by_day_merged$difference!=0,]
View(activity_by_day_merged)
test<-activity_by_day_merged[activity_by_day_merged$difference!=0,]
View(test)
test<-activity_by_day_merged[activity_by_day_merged$difference==0,]
View(activity_by_day_merged)
rm(test)
test<-activity_by_day_merged[activity_by_day_merged$difference==0,]
View(test)
activity_by_day_merged[activity_by_day_merged$difference==0,]
activity_by_day_merged[activity_by_day_merged$difference=="0",]
activity_by_day_merged[activity_by_day_merged$difference<0,]
filter(activity_by_day_merged,difference!=0)
filter(activity_by_day_merged,difference0=0)
filter(activity_by_day_merged,difference==0)
filter(activity_by_day_merged,difference==0)
?filter
filter(activity_by_day_merged,difference!=0)
sum(activity_by_day_merged$Steps_incl_means)
sum(activity_by_day_merged$Steps_incl_means) - sum(activity_by_day_merged$Steps)
sum(activity_by_day_merged$Steps_incl_means) - sum(activity_by_day_merged$Steps, na.rm=TRUE)
