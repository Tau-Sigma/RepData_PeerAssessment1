1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages("RColorBrewer")
x<-rnorm(10000)
y<-rnorm(10000)
smoothScatter(x,y)
?par
par(mar=c(5,4,4,2))
smoothScatter(x,y)
par(mar=c(2,2,2,2))
smoothScatter(x,y)
?mean
?"table"
library(swirl)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
View(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flgs$landmass,mean)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plats)
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants)
head(plants,10)
tail(plants)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4 replace=TRUE)
sample(1:6,4, replace=TRUE)
sample(1:6,4, replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(0:1,100,replace=TRUE,prob=c(0.3,0.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(0:1,100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
rbinom(1,size=100,prob=0.7)
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5)
rpois(5,10)
replicate(100,rpois(5,10))
my_poisreplicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colmMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
cass(t1)
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekday(d1)
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
strptime(t3,"%b %d, %Y %H:%M")
strptime(t3,"%B %d, %Y %H:%M")
t4<-strptime(t3,"%B %d, %Y %H:%M")
t4
?strptime
t3
class(t4)
Sys.tim()>1
Sys.time()>1
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units="days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(speed,dist)
plot(cars)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance",xlab="speed")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance",xlab="Speed")
plot(x=cars$speed,y=cars$dist,main="My Plot")
plot(cars,main="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10:15))
plot(cars,xlim=c(10,15))
plot(cars,pch=2)
library(mtcars)
mtcars
data(mtcars)
mtcars
?boxblot
?boxplot
boxplot(mtcars,formula=mpg~cyl)
boxplot(data=mtcars,formula=mpg~cyl)
boxplot(formula=mpg~cyl, data=mtcars)
hist(mtcars$mpg)
install.packages("kernlab")
install.packages("Sweave")
install.packages("knitr")
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
plot(log10(trainSpam[, 1:4] + 1))
trainSpam = spam[trainIndicator == 1, ] #alle 1er ins Trainingset
testSpam = spam[trainIndicator == 0, ] #alle 0er ins Testset
plot(log10(trainSpam[, 1:4] + 1))
library(boot)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
## Which predictor has minimum cross-validated error?
names(trainSpam)[which.min(cvError)]
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
install.packages('ProjectTemplate')
?qunif
qunif(0.75,0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x[1,]
x[1,:]
x[1,1:4]
x[1:4,1]
x
p
p''
p^T
t(p)
p
x*t(p)
t*p
matrix(x,1,4)
vector(p)
matrix(p,4,1)
matrix(x,1,4)*matrix(p,4,1)
mean(x,p)
?mean
?lapply
lapply(x,x*p)
0.1*1+0.2*2+0.3*3+0.4*4
(0.75*0.3)/((0.75*0.3)+(0.48*0.7))
library(mutate)
library(Mutate)
installed.packages("manipulate")
install.packages("manipulate")
install.packages(("xtable"))
library(xtable)
install.packages(("UsingR"))
library(UsingR)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(ggplot2)
g<-ggplot(long, aes(x=value,fill=variable))
g<- g+geom_histogram(colour="black",binwidth=1)
g<-g+facet_grid(.~variable)
g
g<-ggplot(long, aes(x=value,fill=variable))
library(UsingR); data(galton)
g<-ggplot(long, aes(x=value,fill=variable))
g<-ggplot(long, aes(x=value,fill=variable))
library(reshape2);long<-melt(galton)
g<-ggplot(long, aes(x=value,fill=variable))
g<- g+geom_histogram(colour="black",binwidth=1)
g<-g+facet_grid(.~variable)
g
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist<-function(mu){
mse<-mean((galton$child-mu)^2)
g<-ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black",binwidth=1)
g<-geom_vline(xintercept=mu, size=3)
g<-g+ggtitle(paste("mu = ", mu, ", MSE= ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
myHist<-function(mu){
mse<-mean((galton$child-mu)^2)
g<-ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black",binwidth=1)
g<-geom_vline(xintercept=mu, size=3)
# g<-g+ggtitle(paste("mu = ", mu, ", MSE= ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
myHist<-function(mu){
mse<-mean((galton$child-mu)^2)
g<-ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black",binwidth=1)
g<-geom_vline(xintercept=mu, size=3)
# g<-g+ggtitle(paste("mu = ", mu, ", MSE= ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
myHist<-function(mu){
mse<-mean((galton$child-mu)^2)
g<-ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black",binwidth=1)
g<-geom_vline(xintercept=mu, size=3)
# g<-g+ggtitle(paste("mu = ", mu, ", MSE= ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
myHist<-function(mu){
mse<-mean((galton$child-mu)^2)
g<-ggplot(galton,aes(x=child)) + geom_histogram(fill="salmon",colour="black",binwidth=1)
g<-g + geom_vline(xintercept=mu, size=3)
g<-g + ggtitle(paste("mu = ", mu, ", MSE= ", round(mse, 2), sep=""))
g
}
manipulate(myHist(mu), mu=slider(62,74,step=0.5))
ggplot(galton, aes(x = parent, y = child)) + geom_point()
View(galton)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")                   g
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")                   g
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- ggplot(filter(freqData, "freq" > 0), aes(x = parent, y = child))
g <- ggplot(filter(freqData, freqData$freq > 0), aes(x = parent, y = child))
filter(freqData, freq > 0)
freqData
freqData[,freqData$freq]
names(freqData)
g <- ggplot(freqData[freqData$freq>0,], aes(x = parent, y = child))
g <- g + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child - mean(galton$child)
x <- galton$parent - mean(galton$parent)
freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(freqData[freqData$freq>0,], aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
w[1]
w[2]
2^2
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
leastsq(x,w,0.1471)
source('~/.active-rstudio-document')
leastsq(x,w,0.1471)
leastsq(x,w,0.3)
leastsq(x,w,0.0025)
leastsq(x,w,1.077)
0.300
0.00
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(x~y -1)
)
coef(lm(x~y -1)
)
?lm
lm(y~x -1)
lm(x~y -1)
data(mtcars)
library(datasets)
data(mtcars)
mtcars
coef(lm(mtcars$mpg~mtcars$weight))
names(mtcars)
coef(lm(mtcars$mpg~mtcars$wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x[1]-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y~x))
coef(lm(x~y))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
source('~/.active-rstudio-document')
leastsq <- function(x, mu) {
temp=0
result=0
for (i in 1:4) {
temp=(x[i]-mu)^2
result=result+temp
}
result
}
leastsq(x,0.573)
leastsq(x,0.8)
leastsq(x,0.36)
leastsq(x,0.44)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(y~x))
beta1<-coef(lm(y~x))
lam<-coef(lm(x~y))
lam
Varx<-var(x)
Vary<-var(y)
sdx<-sd(x)
sdy<-sd(y)
beta1/lam
beta1[2]/lam[2]
Vary/Varx
2*sdy/sdx
1.5*0.4
?weekday
?weekdays
setwd("/home/sascha/Dokumente/Coursera/Reproducible research/Assignment 1/Solution")
activity_raw<-read.csv("activity.csv",header=TRUE,na.strings = "NA")
activity_raw$date<-as.Date(activity_raw$date, "%Y-%m-%d")
weekdays(activity_raw$date)
test<-activity_raw
test$weekday<-factor(weekdays(test$date))
View(test)
test$weekday<- factor(test$weekday, levels = c(levels(test$weekday), "weekday","weekend"))
weekday=c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag")
weekend=c("Samstag","Sonntag")
test$weekday[test$weekday in weekday] <- "weekday"
test$weekday[test$weekday %in% weekday] <- "weekday"
test$weekday[test$weekday %in% weekend] <- "weekend"
View(test)
activity_raw<-read.csv("activity.csv",header=TRUE,na.strings = "NA")
activity_raw$date<-as.Date(activity_raw$date, "%Y-%m-%d")
activity_raw$weekday<-factor(weekdays(activity_raw$date)) #add new factor variable
activity_raw$weekday<- factor(activity_raw$weekday, levels = c(levels(activity_raw$weekday), "weekday","weekend")) #add the two new levels
weekday=c("Montag","Dienstag","Mittwoch","Donnerstag","Freitag") #These are German weekdays, depending on your location you might need to change them
weekend=c("Samstag","Sonntag")
activity_raw$weekday[activity_raw$weekday %in% weekday] <- "weekday" #replace old values
activity_raw$weekday[activity_raw$weekday %in% weekend] <- "weekend" #replace old values
activity_raw$weekday<- factor(activity_raw$weekday, levels = c(levels("weekday","weekend")) #remove levels except forr weekday and weekend
View(activity_raw)
activity_raw$weekday<- factor(activity_raw$weekday, levels = c(levels("weekday","weekend"))) #remove levels except forr weekday and weekend
View(activity_raw)
summary(activity_raw)
activity_raw$weekday<- factor(activity_raw$weekday, levels = c(levels("weekday","weekend")))
activity_raw$weekday<- factor(activity_raw$weekday) #remove levels except for weekday and weekend
xyplot(weekdays_interval$interval~weekdays_interval$steps_avg|weekdays_interval$weekday,layout=c(1,2))
library(lattice)
weekdays_interval<-ddply(activity_raw, .(interval), summarise, steps_avg = mean(steps,na.rm=TRUE)); #group by interval and calculate mean for all days
xyplot(weekdays_interval$interval~weekdays_interval$steps_avg|weekdays_interval$weekday,layout=c(1,2))
library(plyr)
weekdays_interval<-ddply(activity_raw, .(interval), summarise, steps_avg = mean(steps,na.rm=TRUE)); #group by interval and calculate mean for all days
xyplot(weekdays_interval$interval~weekdays_interval$steps_avg|weekdays_interval$weekday,layout=c(1,2))
xyplot(weekdays_interval$interval~weekdays_interval$steps_avg|weekdays_interval$weekday)
x<-weekdays_interval$interval
y<-weekdays_interval$steps_avg
f<-factor(f,labels=c("weekday","weekend"))
xyplot(y~x|f,layout=c(2,1))
f<-factor(f,labels=c("weekday","weekend"))
f<-factor(labels=c("weekday","weekend"))
weekdays_interval<-ddply(activity_raw, .(interval,weekday), summarise, steps_avg = mean(steps,na.rm=TRUE)); #group by interval and calculate mean for all days
xyplot(steps_avg~interval|weekday,data=weekdays_interval,layout=c(2,1))
xyplot(steps_avg~interval|weekday,data=weekdays_interval,layout=c(1,2))
xyplot(steps_avg~interval|weekday,data=weekdays_interval,layout=c(1,2),type="l")
xyplot(steps_avg~interval|weekday,data=weekdays_interval,layout=c(1,2),type="l",main ="Average no. of steps by interval", ylab="No. of steps (average)", xlab="Interval",cex.axis=0.7, cex.main=0.8, cex.lab=0.7)
